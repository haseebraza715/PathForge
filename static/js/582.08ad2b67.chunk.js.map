{"version":3,"file":"static/js/582.08ad2b67.chunk.js","mappings":"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","sources":["pages/SortableItem.js","pages/EditRoadmap.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nexport const SortableItem = ({\r\n  id,\r\n  milestone,\r\n  onRemove,\r\n  onUpdate,\r\n  errors,\r\n  index,\r\n}) => {\r\n  const { attributes, listeners, setNodeRef, transform, transition } =\r\n    useSortable({ id });\r\n\r\n  const [milestoneTitle, setMilestoneTitle] = useState(milestone.title);\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  };\r\n\r\n  const handleTitleChange = (e) => {\r\n    const newTitle = e.target.value;\r\n    setMilestoneTitle(newTitle);\r\n    onUpdate(id, newTitle);\r\n  };\r\n\r\n  const handleRemove = (e) => {\r\n    e.stopPropagation(); \r\n    onRemove(id); \r\n  };\r\n\r\n  return (\r\n    <li\r\n      ref={setNodeRef}\r\n      style={style}\r\n      {...attributes}\r\n      {...listeners}\r\n      className=\"bg-gray-700 text-textLight p-4 rounded flex justify-between items-center shadow-md hover:shadow-lg transition duration-300\"\r\n    >\r\n      {/* Milestone Input */}\r\n      <div className=\"flex-grow\">\r\n        <input\r\n          type=\"text\"\r\n          value={milestoneTitle}\r\n          onChange={handleTitleChange}\r\n          placeholder={`Milestone ${index + 1}`}\r\n          className={`w-full bg-transparent focus:outline-none ${\r\n            errors[`milestone-${index}`] ? \"text-red-500\" : \"text-textLight\"\r\n          }`}\r\n        />\r\n        {errors[`milestone-${index}`] && (\r\n          <p className=\"text-red-500 text-sm mt-1\">\r\n            {errors[`milestone-${index}`]}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Remove Button */}\r\n      <div onClick={handleRemove} style={{ pointerEvents: \"auto\" }}>\r\n        <button\r\n          className=\"text-red-500 hover:text-red-700 font-semibold\"\r\n          aria-label=\"Remove milestone\"\r\n          style={{ pointerEvents: \"none\" }} // Disable pointer events on the button itself\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SortableItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { SortableItem } from \"./SortableItem\";\r\n\r\nconst EditRoadmap = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [milestones, setMilestones] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    const savedRoadmaps = JSON.parse(localStorage.getItem(\"roadmaps\")) || [];\r\n    const roadmap = savedRoadmaps.find((r) => r.id === id);\r\n\r\n    if (roadmap) {\r\n      setTitle(roadmap.title);\r\n      setMilestones(roadmap.milestones);\r\n    } else {\r\n      alert(\"Roadmap not found!\");\r\n      navigate(\"/dashboard\");\r\n    }\r\n  }, [id, navigate]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor)\r\n  );\r\n\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active.id !== over.id) {\r\n      const oldIndex = milestones.findIndex((item) => item.id === active.id);\r\n      const newIndex = milestones.findIndex((item) => item.id === over.id);\r\n\r\n      setMilestones((items) => arrayMove(items, oldIndex, newIndex));\r\n    }\r\n  };\r\n\r\n  const handleRemoveMilestone = (id) => {\r\n    const updatedMilestones = milestones.filter(\r\n      (milestone) => milestone.id !== id\r\n    );\r\n    setMilestones(updatedMilestones);\r\n  };\r\n\r\n  const handleUpdateMilestone = (id, newTitle) => {\r\n    const updatedMilestones = milestones.map((milestone) =>\r\n      milestone.id === id ? { ...milestone, title: newTitle } : milestone\r\n    );\r\n    setMilestones(updatedMilestones);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!title.trim()) {\r\n      newErrors.title = \"Title is required.\";\r\n    }\r\n\r\n    milestones.forEach((milestone, index) => {\r\n      if (!milestone.title.trim()) {\r\n        newErrors[`milestone-${index}`] = \"Milestone cannot be empty.\";\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const updatedRoadmap = {\r\n      id,\r\n      title,\r\n      milestones,\r\n    };\r\n\r\n    try {\r\n      const savedRoadmaps = JSON.parse(localStorage.getItem(\"roadmaps\")) || [];\r\n      const updatedRoadmaps = savedRoadmaps.map((r) =>\r\n        r.id === id ? updatedRoadmap : r\r\n      );\r\n\r\n      localStorage.setItem(\"roadmaps\", JSON.stringify(updatedRoadmaps));\r\n      alert(\"Roadmap updated successfully!\");\r\n      navigate(\"/dashboard\");\r\n    } catch (error) {\r\n      console.error(\"Error updating roadmap:\", error);\r\n      alert(\"An error occurred while updating the roadmap.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-darkBackground min-h-screen p-6 text-textLight\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">Edit Roadmap</h1>\r\n      <div className=\"bg-darkCard shadow-lg rounded-lg p-6 max-w-3xl mx-auto\">\r\n        {/* Title Input */}\r\n        <div className=\"mb-6\">\r\n          <label className=\"block text-sm font-semibold mb-2\">\r\n            Roadmap Title\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            placeholder=\"Enter your roadmap title\"\r\n            className={`w-full p-3 bg-gray-700 text-textLight rounded focus:outline-none focus:ring-2 ${\r\n              errors.title ? \"focus:ring-red-500\" : \"focus:ring-accent\"\r\n            }`}\r\n          />\r\n          {errors.title && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Milestones Drag-and-Drop */}\r\n        <h2 className=\"text-lg font-bold text-accent mb-4\">Milestones:</h2>\r\n        <DndContext\r\n          sensors={sensors}\r\n          collisionDetection={closestCenter}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <SortableContext\r\n            items={milestones.map((item) => item.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            <ul className=\"space-y-3\">\r\n              {milestones.map((milestone, index) => (\r\n                <SortableItem\r\n                  key={milestone.id}\r\n                  id={milestone.id}\r\n                  milestone={milestone}\r\n                  onRemove={handleRemoveMilestone}\r\n                  onUpdate={handleUpdateMilestone}\r\n                  errors={errors}\r\n                  index={index}\r\n                />\r\n              ))}\r\n            </ul>\r\n          </SortableContext>\r\n        </DndContext>\r\n\r\n        {/* Save Button */}\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"w-full px-4 py-3 bg-accent text-darkBackground font-bold rounded hover:bg-green-600 transition duration-300 mt-6\"\r\n        >\r\n          Save Roadmap\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditRoadmap;\r\n"],"names":["SortableItem","_ref","id","milestone","onRemove","onUpdate","errors","index","attributes","listeners","setNodeRef","transform","transition","useSortable","milestoneTitle","setMilestoneTitle","useState","title","style","CSS","Transform","toString","_jsxs","_objectSpread","ref","className","children","_jsx","type","value","onChange","e","newTitle","target","placeholder","concat","onClick","stopPropagation","pointerEvents","EditRoadmap","useParams","navigate","useNavigate","setTitle","milestones","setMilestones","setErrors","useEffect","roadmap","JSON","parse","localStorage","getItem","find","r","alert","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","handleRemoveMilestone","updatedMilestones","filter","handleUpdateMilestone","map","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","oldIndex","findIndex","item","newIndex","items","arrayMove","SortableContext","strategy","verticalListSortingStrategy","handleSave","validateForm","newErrors","trim","forEach","Object","keys","length","updatedRoadmap","updatedRoadmaps","setItem","stringify","error","console"],"sourceRoot":""}